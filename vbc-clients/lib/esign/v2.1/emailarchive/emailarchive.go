// Copyright 2022 James Cote
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by gen-esign; DO NOT EDIT.

// Package emailarchive implements the DocuSign SDK
// category EmailArchive.
//
// Email archives enable DocuSign partners and other multi-account customers to easily archive emails sent through DocuSign. The `EmailArchive` resource provides methods for managing your email archive configuration, which consists of the BCC email address or addresses that you want to use to archive DocuSign emails. Each account can use up to five BCC email addresses for archiving purposes.
//
// For more information, see [Email Archive Configuration](https://support.docusign.com/en/guides/ndse-admin-guide-email-archive-configuration).
//
// **Note:** This feature is only available for certain account plans and must be enabled by DocuSign.
//
// Service Api documentation may be found at:
// https://developers.docusign.com/docs/esign-rest-api/reference/EmailArchive
// Usage example:
//
//	import (
//	    "vbc/lib/esign"
//	    "vbc/lib/esign/v2.1/model"
//	)
//	...
//	emailarchiveService := emailarchive.New(esignCredential)
package emailarchive // import "vbc/lib/esignv2.1/emailarchive"

import (
	"context"
	"net/url"
	"strings"

	"vbc/lib/esign"
	"vbc/lib/esign/v2.1/model"
)

// Service implements DocuSign EmailArchive API operations
type Service struct {
	credential esign.Credential
}

// New initializes a emailarchive service using cred to authorize ops.
func New(cred esign.Credential) *Service {
	return &Service{credential: cred}
}

// BCCEmailArchiveCreate creates a BCC email archive configuration.
//
// https://developers.docusign.com/docs/esign-rest-api/reference/emailarchive/bccemailarchive/create
//
// SDK Method EmailArchive::create
func (s *Service) BCCEmailArchiveCreate(bccEmailArchive *model.BccEmailArchive) *BCCEmailArchiveCreateOp {
	return &BCCEmailArchiveCreateOp{
		Credential: s.credential,
		Method:     "POST",
		Path:       "settings/bcc_email_archives",
		Payload:    bccEmailArchive,
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// BCCEmailArchiveCreateOp implements DocuSign API SDK EmailArchive::create
type BCCEmailArchiveCreateOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BCCEmailArchiveCreateOp) Do(ctx context.Context) (*model.BccEmailArchive, error) {
	var res *model.BccEmailArchive
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// BCCEmailArchiveDelete deletes a BCC email archive configuration.
//
// https://developers.docusign.com/docs/esign-rest-api/reference/emailarchive/bccemailarchive/delete
//
// SDK Method EmailArchive::delete
func (s *Service) BCCEmailArchiveDelete(bccEmailArchiveID string) *BCCEmailArchiveDeleteOp {
	return &BCCEmailArchiveDeleteOp{
		Credential: s.credential,
		Method:     "DELETE",
		Path:       strings.Join([]string{"settings", "bcc_email_archives", bccEmailArchiveID}, "/"),
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// BCCEmailArchiveDeleteOp implements DocuSign API SDK EmailArchive::delete
type BCCEmailArchiveDeleteOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BCCEmailArchiveDeleteOp) Do(ctx context.Context) error {
	return ((*esign.Op)(op)).Do(ctx, nil)
}

// BCCEmailArchiveGet gets a BCC email archive configuration and its history.
//
// https://developers.docusign.com/docs/esign-rest-api/reference/emailarchive/bccemailarchive/get
//
// SDK Method EmailArchive::get
func (s *Service) BCCEmailArchiveGet(bccEmailArchiveID string) *BCCEmailArchiveGetOp {
	return &BCCEmailArchiveGetOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       strings.Join([]string{"settings", "bcc_email_archives", bccEmailArchiveID}, "/"),
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// BCCEmailArchiveGetOp implements DocuSign API SDK EmailArchive::get
type BCCEmailArchiveGetOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BCCEmailArchiveGetOp) Do(ctx context.Context) (*model.BccEmailArchiveHistoryList, error) {
	var res *model.BccEmailArchiveHistoryList
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count is the maximum number of results to return.
//
// Use `start_position` to specify the number of items to skip.
func (op *BCCEmailArchiveGetOp) Count(val string) *BCCEmailArchiveGetOp {
	if op != nil {
		op.QueryOpts.Set("count", val)
	}
	return op
}

// StartPosition is the zero-based index of the
// result from which to start returning results.
//
// Use with `count` to limit the number
// of results.
//
// The default value is `0`.
func (op *BCCEmailArchiveGetOp) StartPosition(val string) *BCCEmailArchiveGetOp {
	if op != nil {
		op.QueryOpts.Set("start_position", val)
	}
	return op
}

// BCCEmailArchiveList gets the BCC email archive configurations for an account.
//
// https://developers.docusign.com/docs/esign-rest-api/reference/emailarchive/bccemailarchive/list
//
// SDK Method EmailArchive::list
func (s *Service) BCCEmailArchiveList() *BCCEmailArchiveListOp {
	return &BCCEmailArchiveListOp{
		Credential: s.credential,
		Method:     "GET",
		Path:       "settings/bcc_email_archives",
		Accept:     "application/json",
		QueryOpts:  make(url.Values),
		Version:    esign.APIv21,
	}
}

// BCCEmailArchiveListOp implements DocuSign API SDK EmailArchive::list
type BCCEmailArchiveListOp esign.Op

// Do executes the op.  A nil context will return error.
func (op *BCCEmailArchiveListOp) Do(ctx context.Context) (*model.BccEmailArchiveList, error) {
	var res *model.BccEmailArchiveList
	return res, ((*esign.Op)(op)).Do(ctx, &res)
}

// Count is the maximum number of results to return.
//
// Use `start_position` to specify the number of results to skip.
func (op *BCCEmailArchiveListOp) Count(val string) *BCCEmailArchiveListOp {
	if op != nil {
		op.QueryOpts.Set("count", val)
	}
	return op
}

// StartPosition is the zero-based index of the
// result from which to start returning results.
//
// Use with `count` to limit the number
// of results.
//
// The default value is `0`.
func (op *BCCEmailArchiveListOp) StartPosition(val string) *BCCEmailArchiveListOp {
	if op != nil {
		op.QueryOpts.Set("start_position", val)
	}
	return op
}
